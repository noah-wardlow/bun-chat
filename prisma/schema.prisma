// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  INSTRUCTOR
  STUDENT
  PARENT
  LEADERSHIP
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  role          Role?
  accounts      Account[]
  sessions      Session[]
  adminIn       ChannelAdmin[]
  orgAdmin      OrgAdmin[]
  channels      Channel[]      @relation("ChannelUsers")
  Message       Message[]
  Reply         Reply[]
  reactions     Reaction[]
  threads       Thread[]
  Notification  Notification[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Org {
  id        String     @id @default(cuid())
  name      String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  channels  Channel[]
  admins    OrgAdmin[]
}

model OrgAdmin {
  orgId  String
  userId String
  org    Org    @relation(fields: [orgId], references: [id])
  user   User   @relation(fields: [userId], references: [id])

  @@id([orgId, userId])
}

model ChannelAdmin {
  channelId String
  userId    String
  channel   Channel @relation(fields: [channelId], references: [id])
  user      User    @relation(fields: [userId], references: [id])

  @@id([channelId, userId])
}

model Channel {
  id        String         @id @default(cuid())
  name      String
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  orgId     String?
  isPrivate Boolean        @default(false)
  messages  Message[]
  org       Org?           @relation(fields: [orgId], references: [id])
  admins    ChannelAdmin[]
  users     User[]         @relation("ChannelUsers")

  @@index([orgId])
}

model Message {
  id        String     @id @default(cuid())
  content   String /// @encrypted
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  userId    String
  channelId String
  user      User       @relation(fields: [userId], references: [id])
  channel   Channel    @relation(fields: [channelId], references: [id])
  reactions Reaction[]
  threads   Thread[]

  @@index([userId])
  @@index([channelId])
}

model Reaction {
  id        String  @id @default(cuid())
  emoji     String
  userId    String
  messageId String
  user      User    @relation(fields: [userId], references: [id])
  message   Message @relation(fields: [messageId], references: [id])
}

model Thread {
  id        String  @id @default(cuid())
  messageId String
  userId    String
  message   Message @relation(fields: [messageId], references: [id])
  user      User    @relation(fields: [userId], references: [id])
  replies   Reply[]
}

model Reply {
  id       String @id @default(cuid())
  content  String /// @encrypted
  userId   String
  threadId String
  user     User   @relation(fields: [userId], references: [id])
  thread   Thread @relation(fields: [threadId], references: [id])
}

model Notification {
  id          String           @id @default(cuid())
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  userId      String
  type        NotificationType
  read        Boolean          @default(false)
  referenceId String? // This can be used to store the id of the related entity (Message, Reply, etc.)
  user        User             @relation(fields: [userId], references: [id])

  @@index([userId])
}

enum NotificationType {
  MESSAGE
  REPLY
  REACTION
  THREAD
}
